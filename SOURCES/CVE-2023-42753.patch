From f7c3a903963f0e87a5f1f435a939cfaba804ae5d Mon Sep 17 00:00:00 2001
From: Joe Lawrence <joe.lawrence@redhat.com>
Date: Mon, 4 Dec 2023 11:12:09 -0500
Subject: [KPATCH CVE-2023-42753] kpatch fixes for CVE-2023-42753

Kernels:
5.14.0-362.8.1.el9_3


Kpatch-MR: https://gitlab.com/redhat/prdsc/rhel/src/kpatch/rhel-9/-/merge_requests/75
Approved-by: Yannick Cote (@ycote1)
Changes since last build:
[x86_64]:
af_unix.o: changed function: unix_stream_sendpage
ip_set_hash_netportnet.o: changed function: hash_netportnet4_uadt
ip_set_hash_netportnet.o: changed function: hash_netportnet6_uadt
sch_hfsc.o: changed function: hfsc_change_class
tcp.o: changed function: nvmet_tcp_handle_icreq
tcp.o: changed function: nvmet_tcp_io_work
tcp.o: changed function: nvmet_tcp_try_recv.constprop.0
tun.o: changed function: tun_napi_alloc_frags

[ppc64le]:
af_unix.o: changed function: unix_stream_sendpage
ip_set_hash_netportnet.o: changed function: hash_netportnet4_resize
ip_set_hash_netportnet.o: changed function: hash_netportnet4_uadt
ip_set_hash_netportnet.o: changed function: hash_netportnet4_uref
ip_set_hash_netportnet.o: changed function: hash_netportnet6_resize
ip_set_hash_netportnet.o: changed function: hash_netportnet6_uadt
ip_set_hash_netportnet.o: changed function: hash_netportnet6_uref
sch_hfsc.o: changed function: hfsc_change_class
tcp.o: changed function: nvmet_tcp_handle_icreq
tcp.o: changed function: nvmet_tcp_io_work
tcp.o: changed function: nvmet_tcp_try_recv.constprop.0
tun.o: changed function: tun_napi_alloc_frags

---------------------------

Modifications:
- Z-stream sets IP_SET_HASH_WITH_NET0, which kicks off a bunch of
  preprocessor defined function and data changes, including struct
  hash_netportnet{4,6}.nets[] array sizing and iteration.  Instead of
  deploying shadow variables to trace new/old instances, just reject
  CIDR/CIDR2 if they are 0, i.e. remove support for /0 wildcard matching
  so users get an error when they try to insert a new /0 element.

commit 20ff788ef0e70d3c2c4dd8f3106dd152501913bf
Author: Florian Westphal <fwestpha@redhat.com>
Date:   Tue Oct 24 18:49:27 2023 +0200

    netfilter: ipset: add the missing IP_SET_HASH_WITH_NET0 macro for ip_set_hash_netportnet.c

    JIRA: https://issues.redhat.com/browse/RHEL-8436
    Upstream Status: unknown commit 050d91c03b28c
    CVE: CVE-2023-42753

    commit 050d91c03b28ca479df13dfb02bcd2c60dd6a878
    Author: Kyle Zeng <zengyhkyle@gmail.com>
    Date:   Tue Sep 5 15:04:09 2023 -0700

        netfilter: ipset: add the missing IP_SET_HASH_WITH_NET0 macro for ip_set_hash_netportnet.c

        The missing IP_SET_HASH_WITH_NET0 macro in ip_set_hash_netportnet can
        lead to the use of wrong `CIDR_POS(c)` for calculating array offsets,
        which can lead to integer underflow. As a result, it leads to slab
        out-of-bound access.
        This patch adds back the IP_SET_HASH_WITH_NET0 macro to
        ip_set_hash_netportnet to address the issue.

        Fixes: 886503f34d63 ("netfilter: ipset: actually allow allowable CIDR 0 in hash:net,port,net")
        Suggested-by: Jozsef Kadlecsik <kadlec@netfilter.org>
        Signed-off-by: Kyle Zeng <zengyhkyle@gmail.com>
        Acked-by: Jozsef Kadlecsik <kadlec@netfilter.org>
        Signed-off-by: Florian Westphal <fw@strlen.de>

    Signed-off-by: Florian Westphal <fwestpha@redhat.com>

Suggested-by: Florian Westphal <fwestpha@redhat.com>
Signed-off-by: Joe Lawrence <joe.lawrence@redhat.com>
---
 net/netfilter/ipset/ip_set_hash_netportnet.c | 8 ++++++++
 1 file changed, 8 insertions(+)

diff --git a/net/netfilter/ipset/ip_set_hash_netportnet.c b/net/netfilter/ipset/ip_set_hash_netportnet.c
index 005a7ce87217..e9d7fd5f2bce 100644
--- a/net/netfilter/ipset/ip_set_hash_netportnet.c
+++ b/net/netfilter/ipset/ip_set_hash_netportnet.c
@@ -220,12 +220,16 @@ hash_netportnet4_uadt(struct ip_set *set, struct nlattr *tb[],
 
 	if (tb[IPSET_ATTR_CIDR]) {
 		e.cidr[0] = nla_get_u8(tb[IPSET_ATTR_CIDR]);
+		if (e.cidr[0] == 0)
+			return -IPSET_ERR_INVALID_CIDR;
 		if (e.cidr[0] > HOST_MASK)
 			return -IPSET_ERR_INVALID_CIDR;
 	}
 
 	if (tb[IPSET_ATTR_CIDR2]) {
 		e.cidr[1] = nla_get_u8(tb[IPSET_ATTR_CIDR2]);
+		if (e.cidr[1] == 0)
+			return -IPSET_ERR_INVALID_CIDR;
 		if (e.cidr[1] > HOST_MASK)
 			return -IPSET_ERR_INVALID_CIDR;
 	}
@@ -506,12 +510,16 @@ hash_netportnet6_uadt(struct ip_set *set, struct nlattr *tb[],
 
 	if (tb[IPSET_ATTR_CIDR]) {
 		e.cidr[0] = nla_get_u8(tb[IPSET_ATTR_CIDR]);
+		if (e.cidr[0] == 0)
+			return -IPSET_ERR_INVALID_CIDR;
 		if (e.cidr[0] > HOST_MASK)
 			return -IPSET_ERR_INVALID_CIDR;
 	}
 
 	if (tb[IPSET_ATTR_CIDR2]) {
 		e.cidr[1] = nla_get_u8(tb[IPSET_ATTR_CIDR2]);
+		if (e.cidr[1] == 0)
+			return -IPSET_ERR_INVALID_CIDR;
 		if (e.cidr[1] > HOST_MASK)
 			return -IPSET_ERR_INVALID_CIDR;
 	}
-- 
2.43.0


